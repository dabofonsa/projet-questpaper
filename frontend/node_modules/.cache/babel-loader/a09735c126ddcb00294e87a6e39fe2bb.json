{"ast":null,"code":"import _objectSpread from \"/Users/carnelmegbleto/Desktop/questpaper/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/Users/carnelmegbleto/Desktop/questpaper/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport raf from 'raf';\nvar MODE;\n\n(function (MODE) {\n  MODE[MODE[\"MODE_TIMEOUT\"] = 0] = \"MODE_TIMEOUT\";\n  MODE[MODE[\"MODE_INTERVAL\"] = 1] = \"MODE_INTERVAL\";\n})(MODE || (MODE = {}));\n\nvar fnMap = new Map();\nvar executionSet = new Set();\nvar rafStarted = false;\nvar startId = 0;\n\nfunction getTimeStamp() {\n  return new Date().getTime();\n}\n\nfunction executeFn(value) {\n  var fn = value.fn,\n      args = value.args;\n  fn.apply(void 0, _toConsumableArray(args));\n}\n\nfunction runFunction() {\n  if (executionSet.size === 0) return;\n  executionSet.forEach(executeFn);\n  executionSet.clear();\n}\n\nvar checkTick = function checkTick(currentTimeTick) {\n  return function (value, id) {\n    var nextTick = value.nextTick,\n        ms = value.ms,\n        mode = value.mode;\n\n    if (currentTimeTick - nextTick >= 0) {\n      executionSet.add(value);\n\n      if (mode === MODE.MODE_TIMEOUT) {\n        fnMap.delete(id);\n      } else {\n        fnMap.set(id, _objectSpread(_objectSpread({}, value), {}, {\n          nextTick: nextTick + ms\n        }));\n      }\n    }\n  };\n};\n\nfunction loop() {\n  if (fnMap.size === 0) {\n    rafStarted = false;\n    return;\n  }\n\n  var currentTimeTick = getTimeStamp();\n  fnMap.forEach(checkTick(currentTimeTick));\n  runFunction();\n\n  if (fnMap.size === 0) {\n    rafStarted = false;\n    return;\n  }\n\n  raf(loop);\n}\n\nfunction addId(_ref) {\n  var fn = _ref.fn,\n      ms = _ref.ms,\n      args = _ref.args,\n      mode = _ref.mode;\n  if (!fn) return null;\n  var currentId = startId;\n  fnMap.set(currentId, {\n    fn: fn,\n    ms: ms,\n    nextTick: getTimeStamp() + ms,\n    args: args,\n    mode: mode\n  });\n\n  if (!rafStarted) {\n    rafStarted = true;\n    raf(loop);\n  }\n\n  startId += 1;\n  return currentId;\n}\n\nfunction removeId(id) {\n  if (id == null) return;\n\n  if (fnMap.has(id)) {\n    fnMap.delete(id);\n  }\n}\n\nexport var setTimeout = function setTimeout(fn) {\n  var ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  return addId({\n    fn: fn,\n    ms: ms,\n    args: args,\n    mode: MODE.MODE_TIMEOUT\n  });\n};\nexport var clearTimeout = removeId;\nexport var setInterval = function setInterval(fn) {\n  var ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    args[_key2 - 2] = arguments[_key2];\n  }\n\n  return addId({\n    fn: fn,\n    ms: ms,\n    args: args,\n    mode: MODE.MODE_INTERVAL\n  });\n};\nexport var clearInterval = removeId;\nexport default {\n  setTimeout: setTimeout,\n  clearTimeout: clearTimeout,\n  setInterval: setInterval,\n  clearInterval: clearInterval\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,OAAO,GAAP,MAAgB,KAAhB;AAEA,IAAK,IAAL;;AAAA,CAAA,UAAK,IAAL,EAAS;AACP,EAAA,IAAA,CAAA,IAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA;AACA,EAAA,IAAA,CAAA,IAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,GAAA,eAAA;AACD,CAHD,EAAK,IAAI,KAAJ,IAAI,GAAA,EAAA,CAAT;;AAgBA,IAAM,KAAK,GAAG,IAAI,GAAJ,EAAd;AACA,IAAM,YAAY,GAAG,IAAI,GAAJ,EAArB;AACA,IAAI,UAAU,GAAG,KAAjB;AACA,IAAI,OAAO,GAAG,CAAd;;AAEA,SAAS,YAAT,GAAqB;AACnB,SAAO,IAAI,IAAJ,GAAW,OAAX,EAAP;AACD;;AAED,SAAS,SAAT,CAAmB,KAAnB,EAAuC;AACrC,MAAQ,EAAR,GAAqB,KAArB,CAAQ,EAAR;AAAA,MAAY,IAAZ,GAAqB,KAArB,CAAY,IAAZ;AACA,EAAA,EAAE,MAAF,4BAAM,IAAN;AACD;;AAED,SAAS,WAAT,GAAoB;AAClB,MAAI,YAAY,CAAC,IAAb,KAAsB,CAA1B,EAA6B;AAC7B,EAAA,YAAY,CAAC,OAAb,CAAqB,SAArB;AACA,EAAA,YAAY,CAAC,KAAb;AACD;;AAED,IAAM,SAAS,GAAG,SAAZ,SAAY,CAAC,eAAD;AAAA,SAA6B,UAAC,KAAD,EAAuB,EAAvB,EAAqC;AAClF,QAAQ,QAAR,GAA+B,KAA/B,CAAQ,QAAR;AAAA,QAAkB,EAAlB,GAA+B,KAA/B,CAAkB,EAAlB;AAAA,QAAsB,IAAtB,GAA+B,KAA/B,CAAsB,IAAtB;;AACA,QAAI,eAAe,GAAG,QAAlB,IAA8B,CAAlC,EAAqC;AACnC,MAAA,YAAY,CAAC,GAAb,CAAiB,KAAjB;;AACA,UAAI,IAAI,KAAK,IAAI,CAAC,YAAlB,EAAgC;AAC9B,QAAA,KAAK,CAAC,MAAN,CAAa,EAAb;AACD,OAFD,MAEO;AACL,QAAA,KAAK,CAAC,GAAN,CAAU,EAAV,kCACK,KADL;AAEE,UAAA,QAAQ,EAAE,QAAQ,GAAG;AAFvB;AAID;AACF;AACF,GAbiB;AAAA,CAAlB;;AAeA,SAAS,IAAT,GAAa;AACX,MAAI,KAAK,CAAC,IAAN,KAAe,CAAnB,EAAsB;AACpB,IAAA,UAAU,GAAG,KAAb;AACA;AACD;;AACD,MAAM,eAAe,GAAG,YAAY,EAApC;AACA,EAAA,KAAK,CAAC,OAAN,CAAc,SAAS,CAAC,eAAD,CAAvB;AACA,EAAA,WAAW;;AACX,MAAI,KAAK,CAAC,IAAN,KAAe,CAAnB,EAAsB;AACpB,IAAA,UAAU,GAAG,KAAb;AACA;AACD;;AACD,EAAA,GAAG,CAAC,IAAD,CAAH;AACD;;AAED,SAAS,KAAT,OAAgD;AAAA,MAA/B,EAA+B,QAA/B,EAA+B;AAAA,MAA3B,EAA2B,QAA3B,EAA2B;AAAA,MAAvB,IAAuB,QAAvB,IAAuB;AAAA,MAAjB,IAAiB,QAAjB,IAAiB;AAC9C,MAAI,CAAC,EAAL,EAAS,OAAO,IAAP;AACT,MAAM,SAAS,GAAG,OAAlB;AACA,EAAA,KAAK,CAAC,GAAN,CAAU,SAAV,EAAqB;AACnB,IAAA,EAAE,EAAF,EADmB;AAEnB,IAAA,EAAE,EAAF,EAFmB;AAGnB,IAAA,QAAQ,EAAE,YAAY,KAAK,EAHR;AAInB,IAAA,IAAI,EAAJ,IAJmB;AAKnB,IAAA,IAAI,EAAJ;AALmB,GAArB;;AAOA,MAAI,CAAC,UAAL,EAAiB;AACf,IAAA,UAAU,GAAG,IAAb;AACA,IAAA,GAAG,CAAC,IAAD,CAAH;AACD;;AACD,EAAA,OAAO,IAAI,CAAX;AACA,SAAO,SAAP;AACD;;AAED,SAAS,QAAT,CAAkB,EAAlB,EAA6B;AAC3B,MAAI,EAAE,IAAI,IAAV,EAAgB;;AAChB,MAAI,KAAK,CAAC,GAAN,CAAU,EAAV,CAAJ,EAAmB;AACjB,IAAA,KAAK,CAAC,MAAN,CAAa,EAAb;AACD;AACF;;AAED,OAAO,IAAM,UAAU,GAAG,SAAb,UAAa,CAAC,EAAD;AAAA,MAAe,EAAf,uEAAoB,CAApB;;AAAA,oCAA0B,IAA1B;AAA0B,IAAA,IAA1B;AAAA;;AAAA,SAA0C,KAAK,CAAC;AAAE,IAAA,EAAE,EAAF,EAAF;AAAM,IAAA,EAAE,EAAF,EAAN;AAAU,IAAA,IAAI,EAAJ,IAAV;AAAgB,IAAA,IAAI,EAAE,IAAI,CAAC;AAA3B,GAAD,CAA/C;AAAA,CAAnB;AACP,OAAO,IAAM,YAAY,GAAG,QAArB;AACP,OAAO,IAAM,WAAW,GAAG,SAAd,WAAc,CAAC,EAAD;AAAA,MAAe,EAAf,uEAAoB,CAApB;;AAAA,qCAA0B,IAA1B;AAA0B,IAAA,IAA1B;AAAA;;AAAA,SAA0C,KAAK,CAAC;AAAE,IAAA,EAAE,EAAF,EAAF;AAAM,IAAA,EAAE,EAAF,EAAN;AAAU,IAAA,IAAI,EAAJ,IAAV;AAAgB,IAAA,IAAI,EAAE,IAAI,CAAC;AAA3B,GAAD,CAA/C;AAAA,CAApB;AACP,OAAO,IAAM,aAAa,GAAG,QAAtB;AAEP,eAAe;AAAE,EAAA,UAAU,EAAV,UAAF;AAAc,EAAA,YAAY,EAAZ,YAAd;AAA4B,EAAA,WAAW,EAAX,WAA5B;AAAyC,EAAA,aAAa,EAAb;AAAzC,CAAf","sourceRoot":"","sourcesContent":["import raf from 'raf';\nvar MODE;\n(function (MODE) {\n    MODE[MODE[\"MODE_TIMEOUT\"] = 0] = \"MODE_TIMEOUT\";\n    MODE[MODE[\"MODE_INTERVAL\"] = 1] = \"MODE_INTERVAL\";\n})(MODE || (MODE = {}));\nconst fnMap = new Map();\nconst executionSet = new Set();\nlet rafStarted = false;\nlet startId = 0;\nfunction getTimeStamp() {\n    return new Date().getTime();\n}\nfunction executeFn(value) {\n    const { fn, args } = value;\n    fn(...args);\n}\nfunction runFunction() {\n    if (executionSet.size === 0)\n        return;\n    executionSet.forEach(executeFn);\n    executionSet.clear();\n}\nconst checkTick = (currentTimeTick) => (value, id) => {\n    const { nextTick, ms, mode } = value;\n    if (currentTimeTick - nextTick >= 0) {\n        executionSet.add(value);\n        if (mode === MODE.MODE_TIMEOUT) {\n            fnMap.delete(id);\n        }\n        else {\n            fnMap.set(id, {\n                ...value,\n                nextTick: nextTick + ms,\n            });\n        }\n    }\n};\nfunction loop() {\n    if (fnMap.size === 0) {\n        rafStarted = false;\n        return;\n    }\n    const currentTimeTick = getTimeStamp();\n    fnMap.forEach(checkTick(currentTimeTick));\n    runFunction();\n    if (fnMap.size === 0) {\n        rafStarted = false;\n        return;\n    }\n    raf(loop);\n}\nfunction addId({ fn, ms, args, mode }) {\n    if (!fn)\n        return null;\n    const currentId = startId;\n    fnMap.set(currentId, {\n        fn,\n        ms,\n        nextTick: getTimeStamp() + ms,\n        args,\n        mode,\n    });\n    if (!rafStarted) {\n        rafStarted = true;\n        raf(loop);\n    }\n    startId += 1;\n    return currentId;\n}\nfunction removeId(id) {\n    if (id == null)\n        return;\n    if (fnMap.has(id)) {\n        fnMap.delete(id);\n    }\n}\nexport const setTimeout = (fn, ms = 0, ...args) => addId({ fn, ms, args, mode: MODE.MODE_TIMEOUT });\nexport const clearTimeout = removeId;\nexport const setInterval = (fn, ms = 0, ...args) => addId({ fn, ms, args, mode: MODE.MODE_INTERVAL });\nexport const clearInterval = removeId;\nexport default { setTimeout, clearTimeout, setInterval, clearInterval };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}