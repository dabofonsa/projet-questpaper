{"ast":null,"code":"var _jsxFileName = \"/Users/carnelmegbleto/Desktop/questpaper/frontend/src/Pages/Membership.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Membership = () => {\n  // const stripe = useStripe();\n  // const elements = useElements();\n  // const [message, setMessage] = useState(null);\n  // const [isLoading, setIsLoading] = useState(false);\n  // useEffect(() => {\n  //   if (!stripe) {\n  //     return;\n  //   }\n  //   const clientSecret = new URLSearchParams(window.location.search).get(\n  //     \"payment_intent_client_secret\"\n  //   );\n  //   if (!clientSecret) {\n  //     return;\n  //   }\n  //   stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n  //     switch (paymentIntent.status) {\n  //       case \"succeeded\":\n  //         setMessage(\"Payment succeeded!\");\n  //         break;\n  //       case \"processing\":\n  //         setMessage(\"Your payment is processing.\");\n  //         break;\n  //       case \"requires_payment_method\":\n  //         setMessage(\"Your payment was not successful, please try again.\");\n  //         break;\n  //       default:\n  //         setMessage(\"Something went wrong.\");\n  //         break;\n  //     }\n  //   });\n  // }, [stripe]);\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n  //   if (!stripe || !elements) {\n  //     // Stripe.js has not yet loaded.\n  //     // Make sure to disable form submission until Stripe.js has loaded.\n  //     return;\n  //   }\n  //   setIsLoading(true);\n  //   const { error } = await stripe.confirmPayment({\n  //     elements,\n  //     confirmParams: {\n  //       // Make sure to change this to your payment completion page\n  //       return_url: \"http://localhost:3000\",\n  //     },\n  //   });\n  //   // This point will only be reached if there is an immediate error when\n  //   // confirming the payment. Otherwise, your customer will be redirected to\n  //   // your `return_url`. For some payment methods like iDEAL, your customer will\n  //   // be redirected to an intermediate site first to authorize the payment, then\n  //   // redirected to the `return_url`.\n  //   if (error.type === \"card_error\" || error.type === \"validation_error\") {\n  //     setMessage(error.message);\n  //   } else {\n  //     setMessage(\"An unexpected error occured.\");\n  //   }\n  //   setIsLoading(false);\n  // };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(PaymentElement, {\n      id: \"payment-element\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isLoading || !stripe || !elements,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 24\n        }, this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"payment-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Membership;\nexport default Membership;\n\nvar _c;\n\n$RefreshReg$(_c, \"Membership\");","map":{"version":3,"sources":["/Users/carnelmegbleto/Desktop/questpaper/frontend/src/Pages/Membership.js"],"names":["React","useEffect","useState","PaymentElement","useStripe","useElements","Membership","handleSubmit","isLoading","stripe","elements","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SACEC,cADF,EAEEC,SAFF,EAGEC,WAHF,QAIO,yBAJP;;;AAMA,MAAMC,UAAU,GAAG,MAAM;AACrB;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,sBACI;AAAM,IAAA,EAAE,EAAC,cAAT;AAAwB,IAAA,QAAQ,EAAEC,YAAlC;AAAA,4BACF,QAAC,cAAD;AAAgB,MAAA,EAAE,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,YADE,eAEF;AAAQ,MAAA,QAAQ,EAAEC,SAAS,IAAI,CAACC,MAAd,IAAwB,CAACC,QAA3C;AAAqD,MAAA,EAAE,EAAC,QAAxD;AAAA,6BACE;AAAM,QAAA,EAAE,EAAC,aAAT;AAAA,kBACGF,SAAS,gBAAG;AAAK,UAAA,SAAS,EAAC,SAAf;AAAyB,UAAA,EAAE,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,gBAAH,GAAkD;AAD9D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFE,EAQDG,OAAO,iBAAI;AAAK,MAAA,EAAE,EAAC,iBAAR;AAAA,gBAA2BA;AAA3B;AAAA;AAAA;AAAA;AAAA,YARV;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAnFD;;KAAML,U;AAqFN,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  PaymentElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\n\nconst Membership = () => {\n    // const stripe = useStripe();\n    // const elements = useElements();\n  \n    // const [message, setMessage] = useState(null);\n    // const [isLoading, setIsLoading] = useState(false);\n  \n    // useEffect(() => {\n    //   if (!stripe) {\n    //     return;\n    //   }\n  \n    //   const clientSecret = new URLSearchParams(window.location.search).get(\n    //     \"payment_intent_client_secret\"\n    //   );\n  \n    //   if (!clientSecret) {\n    //     return;\n    //   }\n  \n    //   stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n    //     switch (paymentIntent.status) {\n    //       case \"succeeded\":\n    //         setMessage(\"Payment succeeded!\");\n    //         break;\n    //       case \"processing\":\n    //         setMessage(\"Your payment is processing.\");\n    //         break;\n    //       case \"requires_payment_method\":\n    //         setMessage(\"Your payment was not successful, please try again.\");\n    //         break;\n    //       default:\n    //         setMessage(\"Something went wrong.\");\n    //         break;\n    //     }\n    //   });\n    // }, [stripe]);\n  \n    // const handleSubmit = async (e) => {\n    //   e.preventDefault();\n  \n    //   if (!stripe || !elements) {\n    //     // Stripe.js has not yet loaded.\n    //     // Make sure to disable form submission until Stripe.js has loaded.\n    //     return;\n    //   }\n  \n    //   setIsLoading(true);\n  \n    //   const { error } = await stripe.confirmPayment({\n    //     elements,\n    //     confirmParams: {\n    //       // Make sure to change this to your payment completion page\n    //       return_url: \"http://localhost:3000\",\n    //     },\n    //   });\n  \n    //   // This point will only be reached if there is an immediate error when\n    //   // confirming the payment. Otherwise, your customer will be redirected to\n    //   // your `return_url`. For some payment methods like iDEAL, your customer will\n    //   // be redirected to an intermediate site first to authorize the payment, then\n    //   // redirected to the `return_url`.\n    //   if (error.type === \"card_error\" || error.type === \"validation_error\") {\n    //     setMessage(error.message);\n    //   } else {\n    //     setMessage(\"An unexpected error occured.\");\n    //   }\n  \n    //   setIsLoading(false);\n    // };\n  \n    return (\n        <form id=\"payment-form\" onSubmit={handleSubmit}>\n      <PaymentElement id=\"payment-element\" />\n      <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n        <span id=\"button-text\">\n          {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n        </span>\n      </button>\n      {/* Show any error or success messages */}\n      {message && <div id=\"payment-message\">{message}</div>}\n    </form>\n    )\n}\n\nexport default Membership\n"]},"metadata":{},"sourceType":"module"}