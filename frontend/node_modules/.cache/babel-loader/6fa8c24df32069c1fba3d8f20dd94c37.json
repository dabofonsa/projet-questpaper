{"ast":null,"code":"var _jsxFileName = \"/Users/carnelmegbleto/Desktop/questpaper/frontend/src/components/CardForm.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { PaymentElement } from \"@stripe/react-stripe-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CardForm = () => {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      confirmParams: {\n        return_url: \"https://my-site.com/order/123/complete\"\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., payment details incomplete)\n      console.log(result.error.message);\n    } else {// Your customer will be redirected to your `return_url`. For some payment\n      // methods like iDEAL, your customer will be redirected to an intermediate\n      // site first to authorize the payment, then redirected to the `return_url`.\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(PaymentElement, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CardForm, \"EKvoGMX7lxsZ5SGPpYu2aKFzClQ=\", true);\n\n_c = CardForm;\nexport default CardForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardForm\");","map":{"version":3,"sources":["/Users/carnelmegbleto/Desktop/questpaper/frontend/src/components/CardForm.js"],"names":["React","PaymentElement","CardForm","stripe","useStripe","elements","useElements","handleSubmit","event","preventDefault","result","confirmPayment","confirmParams","return_url","error","console","log","message"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,yBAA/B;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACnB,QAAMC,MAAM,GAAGC,SAAS,EAAxB;AACA,QAAMC,QAAQ,GAAGC,WAAW,EAA5B;;AAEA,QAAMC,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpC;AACA;AACAA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI,CAACN,MAAD,IAAW,CAACE,QAAhB,EAA0B;AACxB;AACA;AACA;AACD;;AAED,UAAMK,MAAM,GAAG,MAAMP,MAAM,CAACQ,cAAP,CAAsB;AACzC;AACAN,MAAAA,QAFyC;AAGzCO,MAAAA,aAAa,EAAE;AACbC,QAAAA,UAAU,EAAE;AADC;AAH0B,KAAtB,CAArB;;AAQA,QAAIH,MAAM,CAACI,KAAX,EAAkB;AAChB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACI,KAAP,CAAaG,OAAzB;AACD,KAHD,MAGO,CACL;AACA;AACA;AACD;AACF,GA3BD;;AA6BF,sBACE;AAAA,4BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAvCD;;GAAMf,Q;;KAAAA,Q;AAyCN,eAAeA,QAAf","sourcesContent":["import React from \"react\";\nimport { PaymentElement } from \"@stripe/react-stripe-js\";\n\nconst CardForm = () => {\n    const stripe = useStripe();\n    const elements = useElements();\n  \n    const handleSubmit = async (event) => {\n      // We don't want to let default form submission happen here,\n      // which would refresh the page.\n      event.preventDefault();\n  \n      if (!stripe || !elements) {\n        // Stripe.js has not yet loaded.\n        // Make sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n  \n      const result = await stripe.confirmPayment({\n        //`Elements` instance that was used to create the Payment Element\n        elements,\n        confirmParams: {\n          return_url: \"https://my-site.com/order/123/complete\",\n        },\n      });\n  \n      if (result.error) {\n        // Show error to your customer (e.g., payment details incomplete)\n        console.log(result.error.message);\n      } else {\n        // Your customer will be redirected to your `return_url`. For some payment\n        // methods like iDEAL, your customer will be redirected to an intermediate\n        // site first to authorize the payment, then redirected to the `return_url`.\n      }\n    };\n  \n  return (\n    <form>\n      <PaymentElement />\n      <button>Submit</button>\n    </form>\n  );\n};\n\nexport default CardForm;\n"]},"metadata":{},"sourceType":"module"}